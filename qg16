#! /usr/bin/env python
#
# python script to generate and execute an SGE script to run the single
# argument filename as a g16 job parsing the DefaultRoute and job file
# to determine the resources requested
#

import sys, os, re, getopt

# variables to be used
queues = {'all':'all','bigmem':'bigmem'}
qs = "|".join(sorted(queues.keys()))
queue = "all"

versions = {'B': '/usr/local/gaussian/g16B01'}
vs = "|".join(sorted(versions.keys()))
version = "B"
execute = True


def bytes(memstr):
  """Determine the number of bytes in memstr providing memory requirments in g16."""
  s = memstr.strip().upper()          # make sure we only have strippped upper case
  unit = s[-1]                        # get the last letter
  if unit != 'W' and unit != 'B':     # make sure it ends with B or W, otherwise it is W
    s = s+'W'
  return eval(s.replace("B","*1").replace("W","*8").replace("G","*1024M").replace("M","*1024K").replace("K","*1024"))

def usage():
  print """\
  usage: qg16 [-h] [-n] [-q %(qs)s] [-v %(vs)s] g16-input-file 
  -h prints this helps and exists
  -n do not execute the job but only create the script file
  -q queue to run in. Default %(queue)s.
  -v version to run. Default %(version)s.
""" % {'queue':queue, 'version':version, 'vs':vs, 'qs':qs}

# parse arguments
try:
  opts, args = getopt.getopt(sys.argv[1:],'hnq:v:')
except getopt.GetoptError, err:
  print str(err)
  usage()
  sys.exit(1)

for o, a in opts:
  if o == '-n': execute = False
  if o == '-q': queue=a
  if o == '-v': version=a
  if o == '-h':
    usage()
    sys.exit(2)

if not queues.has_key(queue):
  print "Error in the -q argument value, which should be one of: ",qs
  sys.exit(3)

if not versions.has_key(version):
  print "Error in -v argument value, which should be one of: ", vs
  sys.exit(4)

g16root = versions[version]

# only last non option is the filename
if len(args) > 0: fname = args.pop()
else:
  print "Provide a filename"
  usage()
  sys.exit(5)

if not os.path.exists(fname):
  print 'File '+fname+' does not exist. Exiting....'
  sys.exit(2)

# determine the name of job.
try:    job = fname[0:fname.rindex('.')]
except: job = fname

jobname=job
if (jobname[0].isdigit()): jobname="q_"+job

# the defaults for g16 without any override from Default.Route
nodes = 1
ppn = 1
mem = 6 * 1024 *1024 * 8
minmem = 0
maxdisk = 0

# determine overrides from Default.Route if it exists
# internally concatenate local to global so local is last and overrides 
# global settings
deffile = ""
defaultRoute = g16root+'/g16/Default.Route'
if os.path.exists(defaultRoute): deffile = open(defaultRoute).read()
if os.path.exists('Default.Route'): deffile += open('Default.Route').read()
if len(deffile) > 0:
  # -M- memory default in words (1 word = 8 bytes)  equivalent to %mem
  pat = re.compile(r'-M-.*?([0-9]+[kmg][bw])',re.IGNORECASE)
  ss = map(bytes, re.findall(pat, deffile))
  if len(ss) > 0: mem = ss.pop()

  # -P- numproc shared  equivalent to %nprocshared 
  pat = re.compile(r'-P-.*?([0-9])', re.IGNORECASE)
  ss = map(int, re.findall(pat,deffile))
  if len(ss) > 0: ppn = ss.pop()

  # -#- Maxdisk=xxx
  pat = re.compile(r'-#-.*?maxdisk.*?([0-9]+[kmg][bw])',re.IGNORECASE)
  ss = map(bytes, re.findall(pat, deffile))
  if len(ss) > 0: maxdisk = ss.pop()

# determine the overrides as requested by the job itself
comfile = open(fname).read()

# the rest of the computational resources once they have been established
# need to be appended to the resources list with ppn first!!!
resources = []

# %nproc and %nprocshared requested to determine ppn=xxx
nproc = ppn                      # minimially default pnn
pat = re.compile(r'%nproc=([0-9]+)', re.IGNORECASE)
ss = map(int, re.findall(pat, comfile))
if len(ss) > 0: nproc=max(ss)    # nproc is really what the comfile wanted
#print "nproc="+str(nproc)
# %nprocshared if it exists (seemed to be part of g16 as well)
# that can override the -P-, which is really the number of processors (%nproc)
# as well
nprocs = ppn                      # minimially default pnn
pat = re.compile(r'%nprocs.*?=([0-9]+)', re.IGNORECASE)
ss = map(int, re.findall(pat, comfile))
if len(ss) > 0: nprocs=max(ss)    # nprocs is really what the comfile wanted
#print "nprocs="+str(nprocs)
ppn = max(nprocs,nproc)           # pick the higher of nprocs or nprocshared

# %mem requested to determine mem=xxxmb
pat = re.compile(r'%mem.*?=([0-9]+[kmg][bw])', re.IGNORECASE)
ss = map(bytes,re.findall(pat, comfile))
if len(ss) > 0: mem=max(ss)    # memory is really what the comfile wanted
mem = max(mem, minmem)         # but PBS seems to have a minimum requirement?
resources.append("mem_free="+str(mem/(1024*1024))+"M")

# maxdisk requested to determine file=xxxxmb
pat = re.compile(r'maxdisk=([0-9]+[kmg][bw])', re.IGNORECASE)
ss = map(bytes,re.findall(pat, comfile))
if len(ss) > 0: maxdisk= max(ss) # maxdisk is really what the comfile wanted
if maxdisk > 0: resources.append("diskfree="+str(maxdisk/(1024*1024))+"M")

# collected a node-based resources: make the resourceline for SGE script
# only a #$ -l by itself causes a problem
resourceline = ""
if len(resources) > 0: resourceline = "\n#$ -l "+",".join(resources)

# postg16 of formchk  only when %chk is encountered
postg16=""
pat = re.compile(r'%chk=(.*)', re.IGNORECASE)
ss = re.findall(pat,comfile)
if len(ss) > 0:
  chkptfile = ss.pop()
  try:    chkptroot = chkptfile[0:chkptfile.rindex('.chk')]
  except: chkptroot = chkptfile
  postg16 = "formchk "+chkptroot+".chk "+chkptroot+".fchk"

# CREATION OF THE SCRIPT FILE
#scriptfile = "script." + str(os.getpid()) # unique filename (not for now?)
scriptfile = job+".sge"

scriptform = """\
#!/bin/csh

#$ -S /bin/csh
#$ -N %(jobname)s
#$ -cwd
#$ -q %(queue)s.q 
#$ -pe threaded %(ppn)d %(resourceline)s
#$ -o %(job)s.o$JOB_ID
#$ -j y
#$ -cwd

# use the SGE provided TMPDIR which will be cleaned up automatically
setenv GAUSS_SCRDIR ${TMPDIR}
setenv g16root %(g16root)s
source %(g16root)s/g16/bsd/g16.login

echo job running on `hostname` with GAUSS_SCRDIR as $GAUSS_SCRDIR

%(g16root)s/g16/g16 %(fname)s

%(postg16)s
"""

f = open(scriptfile,'w')
print >>f, scriptform % {'job':job, 'queue':queue, 'fname':fname, 'jobname':jobname, 
  'postg16':postg16, 'g16root':g16root,
  'ppn':ppn, 'resourceline':resourceline }
f.close();

if execute:
  os.system("qsub "+scriptfile)
  os.system("rm -f "+scriptfile)

